import org.flywaydb.gradle.task.FlywayCleanTask
import org.flywaydb.gradle.task.FlywayMigrateTask

plugins {
    id 'org.springframework.boot' version '2.3.4.RELEASE' // '2.4.1'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'org.flywaydb.flyway' version '6.5.6'
    id 'nu.studer.jooq' version '5.2'
    id 'java'
}

def dbConfig = [
        dev : [dbUrl   : 'jdbc:postgresql://localhost/project_manager',
               app_user: [user: 'pm_app_user', password: 'password'],
               pm_user : [user: 'pm_migration_user', password: 'password']
        ],
        test: [dbUrl   : 'jdbc:postgresql://localhost/project_manager_test',
               app_user: [user: 'pm_app_user', password: 'password'],
               pm_user : [user: 'pm_migration_user', password: 'password']
        ]
]

group = 'net.digitallogic'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'org.flywaydb:flyway-core'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    jooqGenerator 'org.postgresql:postgresql'

    compileOnly 'org.projectlombok:lombok:1.18.16'
    runtimeOnly 'org.postgresql:postgresql'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.assertj:assertj-core:3.16.1'
    testCompileOnly 'org.projectlombok:lombok:1.18.16'

    annotationProcessor 'org.projectlombok:lombok:1.18.16'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.16'

    annotationProcessor 'org.hibernate:hibernate-jpamodelgen'
    testImplementation 'com.github.javafaker:javafaker:1.0.2'
}

flyway {
    url = dbConfig.dev.dbUrl
    user = dbConfig.dev.pm_user.user
    password = dbConfig.dev.pm_user.password
    schemas = ['public']
    placeholders = [
            'sysAccountEmail': "'system_account@localhost'",
            'sysAccountPwd'  : "'{bcrypt}\$2y\$17\$mnQvgxTWmCsE2Pecu2zk7uKnrfeH5Qhgw6A7qR6asRWBmvH7Mg4Qu'",
            'app_user'       : "'pm_app_user'"
    ]
}

jooq {
    //version = '3.14.4'

    configurations {
        main {  // name of the jOOQ configuration
            generateSchemaSourceOnCompilation = true  // default (can be omitted)

            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = dbConfig.dev.dbUrl
                    user = dbConfig.dev.app_user.user
                    password = dbConfig.dev.app_user.password
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                    }
                    generate {
                        deprecated = false
                        records = true
                        pojos = false
                        routines = false
                        //immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'net.digitallogic.ProjectManager'
                        directory = 'build/generated/sources/jooq/java/main'  // default (can be omitted)
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}

task migrateTest(type: FlywayMigrateTask) {
    group = 'flywayTest'
    url = dbConfig.test.dbUrl
}

task cleanTest(type: FlywayCleanTask) {
    group = 'flywayTest'
    url = dbConfig.test.dbUrl
}

test {
    useJUnitPlatform()
}
